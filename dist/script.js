(()=>{"use strict";var t=function(t,e){this.x=t,this.y=e,this.element=!1,this.containsObject=!1},e=function(){function e(t,e){this.width=t,this.height=e,this.grid=this.createGrid()}return e.prototype.createGrid=function(){var e,i,n=new Array(this.height);for(e=0;e<this.height;e++){var s=new Array(this.width);for(i=0;i<this.width;i++)s[i]=new t(i,e);n[e]=s}return n},e}(),i=function(t,e,i){this.grid=t,this.currentX=e-1,this.currentY=i-1,this.currentCell=t.grid[i-1][e-1],this.homeCell=t.grid[i-1][e-1],this.element=!1},n=function(){function t(t,e,i,n,s){void 0===i&&(i=!1),this.timePlay=t,this.canPlay=!1,this.stopFunction=i,this.person=e,this.view=n,this.model=s,this.count=0,this.isCollected=!1,this.continueGame=!1}return t.prototype.startGame=function(){var t,e=this;this.canPlay=!0,setTimeout((function(){e.stopGame(e)}),this.timePlay);var i=this.timePlay/100,n=null===(t=document.querySelector("#progress"))||void 0===t?void 0:t.querySelector("progress"),s=setInterval((function(){i--,n.setAttribute("value",""+i),i<=0&&(console.log("stop timer"),clearInterval(s))}),100)},t.prototype.stopGame=function(t){t.canPlay=!1,t.stopFunction&&t.stopFunction()},t}(),s=function(){function t(){}return t.prototype.start=function(t,e,i,n){this.drawGrid(t),e.element=document.getElementById("person"),e.currentCell.element.appendChild(document.getElementById("home")),this.setPositionPerson(e,e.currentCell),this.drawProgressBar(i.timePlay),this.drawObjects(n),i.startGame()},t.prototype.viewMessage=function(){document.querySelector(".message").style.visibility="visible"},t.prototype.hideMessage=function(){document.querySelector(".message").style.visibility="hidden"},t.prototype.drawObjects=function(t){t.forEach((function(t){var e=document.createElement("div");e.classList.add("carrot"),t.element.appendChild(e)}))},t.prototype.cleaningCell=function(t){t.forEach((function(t){t.element.innerHTML=""}))},t.prototype.continueGame=function(t,e,i){this.setPositionPerson(t,t.homeCell),this.drawObjects(i),e.startGame(),console.log("continue")},t.prototype.setPositionPerson=function(t,e){e.containsObject&&(e.element.innerHTML=""),e.element.appendChild(t.element),t.currentX=e.x,t.currentY=e.y,t.currentCell=e},t.prototype.refreshCount=function(t){document.getElementById("counter").innerHTML=""+t},t.prototype.drawProgressBar=function(t){var e=document.getElementById("progress"),i=document.createElement("progress");i.setAttribute("max",""+t/100),i.setAttribute("value","0"),e.appendChild(i)},t.prototype.drawGrid=function(t){var e,i,n=document.getElementById("grid");for(e=0;e<t.height;e++){var s=document.createElement("div");for(s.classList.add("row"),i=0;i<t.width;i++){var o=document.createElement("div");o.classList.add("cell"),t.grid[e][i].element=o,t.grid[e][i].htmlX=o.style.left+"px",t.grid[e][i].htmlY=o.style.top+"px",null==s||s.appendChild(o)}null==n||n.appendChild(s)}},t}(),o=function(){function t(t,s,o,r){this.view=t,this.grid=new e(s,o),this.person=new i(this.grid,3,5),this.game=new n(1e3*r/2,this.person,this.stopGame,this.view,this),this.count=0,this.lastRoundCount=0,this.isCollected=!1,this.continueGame=!1}return t.prototype.start=function(){this.objects=this.calculatePositionObjects(),this.view.start(this.grid,this.person,this.game,this.objects)},t.prototype.stopGame=function(){console.log("stop game"),this.person.currentCell!=this.person.homeCell||0==this.isCollected?(console.log("lose"),this.continueGame=!1,this.count=0,this.view.refreshCount(this.count)):(this.continueGame=!0,console.log("cool")),this.view.viewMessage()},t.prototype.calculatePositionObjects=function(){var t,e=this.randomInt(2,5),i=new Array(e);for(t=0;t<e;t++){var n=this.randomInt(0,this.grid.height-1),s=this.randomInt(0,this.grid.width-1);this.person.homeCell!=this.grid.grid[n][s]?(this.grid.grid[n][s].containsObject=!0,i[t]=this.grid.grid[n][s]):t--}return i},t.prototype.randomInt=function(t,e){return Math.floor(Math.random()*(e-t+1))+t},t.prototype.checkContains=function(t){if(t.containsObject){this.game.isCollected=!0,this.count+=1,this.view.refreshCount(this.count),t.containsObject=!1;var e=void 0;for(e=0;e<this.objects.length&&t!=this.objects[e];e++);}},t.prototype.cleaningCell=function(){this.objects.forEach((function(t){t.containsObject=!1}))},t.prototype.definitionKey=function(t){if(this.game.canPlay)switch(t){case"KeyW":if(this.person.currentY-1>=0){var e=this.grid.grid[this.person.currentY-1][this.person.currentX];this.view.setPositionPerson(this.person,e),this.checkContains(e)}break;case"KeyS":this.person.currentY+1<=this.grid.height-1&&(e=this.grid.grid[this.person.currentY+1][this.person.currentX],this.view.setPositionPerson(this.person,e),this.checkContains(e));break;case"KeyA":this.person.currentX-1>=0&&(e=this.grid.grid[this.person.currentY][this.person.currentX-1],this.view.setPositionPerson(this.person,e),this.checkContains(e));break;case"KeyD":this.person.currentX+1<=this.grid.width-1&&(e=this.grid.grid[this.person.currentY][this.person.currentX+1],this.view.setPositionPerson(this.person,e),this.checkContains(e))}else"Enter"==t&&(this.view.hideMessage(),this.game.isCollected=!1,this.game.continueGame||(this.count=0),this.objects.length>0&&(this.cleaningCell(),this.view.cleaningCell(this.objects)),this.objects=this.calculatePositionObjects(),this.view.continueGame(this.person,this.game,this.objects))},t}(),r=function(){function t(t){this.model=t}return t.prototype.start=function(){this.model.start(),this.auditionEvent()},t.prototype.auditionEvent=function(){var t=this;document.onkeydown=function(e){t.model.definitionKey(e.code)}},t}(),c=document.querySelector("#start-message");c.style.visibility="visible";var h=document.querySelector(".main");h.style.visibility="hidden",document.onkeydown=function(t){if("Enter"==t.code){for(var e=prompt("Введите ширину поля >= 5","");Number(e)<5;)e=prompt("Введите ширину поля >= 5","");for(var i=prompt("Введите высоту поля >= 5","");Number(i)<5;)i=prompt("Введите высоту поля >= 5","");for(var n=prompt("Введите время раунда >= 5 секунд","");Number(n)<5;)n=prompt("Введите время раунда >= 5","");h.style.visibility="visible";var a=new s,l=new o(a,Number(e),Number(i),Number(n));new r(l).start(),c.style.visibility="hidden"}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,